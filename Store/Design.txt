Eftersom descriptionPanel är en TableLayoutPanel som det kommer att finnas flera av, beroende på hur många produkter som ska skapas, väljer jag att abstrahera det till en klassmetod som jag kan anropa flera gånger. För att få konsekvens i koden, och göra den mer lättföljd, har jag även gjort de andra TabelLayoutPanel till klassmetoder och lagt dem tillsammans längst ner i källkoden. En nackdel med att göra så här istället för att skriva koden för panelerna där de skapas (i MyForm) är att det blir mer scrollande upp och ner i koden för att se vad som egentligen byggs just där och då.
Undantaget är den TableLayoutPanel som innehåller information om de varor som lagts i varukorgen. I klassen CartInfo har jag information om de varor som ligger i korgen. Den ärver information från klassen Product, eftersom de instanserna är skapade av instanser av klassen Product. Där finns även en instansvariabel som berättar hur många av just den varan som finns i korgen, och en metod för att visa upp varan i korgen. Därav den undantagna TableLayoutPanel.
Alla variabler i programmet är instansvariabler, för att kunna komma åt dem utanför scopet. Alla variabler behövs inte utanför sitt scope, och skulle därmed kunna vara klassvariabler istället. Men på det här sättet har jag kunnat samla variabler och fått bättre översikt.
När jag sorterat instansvariabler, metoder och klasser bland annat har jag utgått från vilken ordning saker och ting händer i butiken, för att den som läser koden nästa gång lättare ska kunna följa hur det är uppbyggt.
Jag har gjort instansvariabeln cartQuantity (som anger antalet av produkten i varukorgen) inkapslad för att säkerställa att den inte går under 0. Egentligen ska koden inte kunna sätta cartQuantity till något negativt, men på det här sättet är den inte känslig för problem med andra delar av koden. Till en början ville jag att användaren skulle kunna mata in antalet själv i en TextBox och då var det ännu mer relevant. När jag tog bort den funktionen och gjorde den till en Label lät jag inkapslingen vara kvar, just för att resten av koden inte ska kunna sätta den till negativ.